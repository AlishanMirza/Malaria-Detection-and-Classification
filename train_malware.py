#!/usr/bin/env python3
"""Train malware family classifiers on BODMAS features (expects data/processed/bodmas_features_ext.npz)
"""
import argparse, numpy as np, joblib
from pathlib import Path
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report
import lightgbm as lgb

MODELDIR = Path('models'); MODELDIR.mkdir(parents=True, exist_ok=True)

def load_features(path):
    data = np.load(path, allow_pickle=True)
    X = data['X']
    # This script assumes labels are provided separately in data/labels.npy (user must prepare)
    try:
        y = np.load('data/labels.npy')
    except Exception:
        # synthetic placeholder: random labels
        y = (np.random.randint(0,4,size=X.shape[0]))
    return X, y

def main():
    parser = argparse.ArgumentParser()
    parser.add_argument('--features', default='data/processed/bodmas_features_ext.npz')
    args = parser.parse_args()
    X, y = load_features(args.features)
    X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2, random_state=42)
    rf = RandomForestClassifier(n_estimators=200, random_state=42, n_jobs=-1)
    rf.fit(X_train, y_train)
    joblib.dump(rf, MODELDIR / 'rf_malware.pkl')
    preds = rf.predict(X_test)
    print(classification_report(y_test, preds))

if __name__=='__main__':
    main()
